class Solution {
public:
    bool canVisitAllRooms(vector<vector<int>>& rooms) {
        vector<bool> unlocked(rooms.size());
        
        //start with rooms[0] (since we know that rooms[0] is unlocked)
        queue<int>q;
        q.push(0);
        
        //check for each key in queue (included further keys)        
        while(!q.empty()){
            int i = q.front();
            q.pop();
            
            //skip if rooms[i] is already visited (so when it is unlocked)
            if (unlocked[i])
                continue;
            
            //unlock rooms[i] (also mark it as visited)
            unlocked[i] = true;
            
            //for each key found in rooms[i], check if rooms[key] is locked, if so add them to queue
            for (int key : rooms[i])
                if (!unlocked[key])
                    q.push(key);
        }
        
        //if there is 1 room locked return false
        for (bool x : unlocked)
            if (x == false)
                return false;
        
        return true;
    }
};
