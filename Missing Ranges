class Solution {
 public:
  vector<string> findMissingRanges(vector<int>& nums, int lower, int upper) {
    if (nums.empty())
      return {getRange(lower, upper)}; // size is empty return 0

    vector<string> ans; 

    if (nums.front() > lower) 
      ans.push_back(getRange(lower, nums.front() - 1));    // if lower is less than the first element of the vector (edge case)

    for (int i = 1; i < nums.size(); ++i) // start from 1 cause we already checked for missing lower above 
      if (nums[i] > nums[i - 1] + 1)    // if the diff is not 1, it means there are missing range
        ans.push_back(getRange(nums[i - 1] + 1, nums[i] - 1)); // adding 1 to everything cause indices starts from 0

    if (nums.back() < upper) // upper is greater than back as in the last element of the vector
      ans.push_back(getRange(nums.back() + 1, upper)); //this means that the given upper is missing

    return ans;
  }

 private:
  string getRange(int lo, int hi) {
    if (lo == hi)
      return to_string(lo); //if the same element then return a single element
    return to_string(lo) + "->" + to_string(hi); // else return a range by adding arrow and formatting to string
  }
};
