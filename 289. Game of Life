The idea is to create a copy of the original board and in that copy count the number of live cells around each cell and update the value in original board accordingly.

(Used extra space here because updating the values in original board directly can lead to wrong answers because of changed state and this logic won't work)

class Solution {
public:
    void gameOfLife(vector<vector<int>>& board) {
        
        int row = board.size();
        int col = board[0].size();
        
		// creating a copy of board
        vector<vector<int>> temp(board);
        
		// eight directions in which we can move
        vector<pair<int,int>> dirs{{0,1},{1,1},{1,0},{-1,1},{-1,0},{-1,-1},{0,-1},{1,-1}};
        
        for(int i=0; i<row; i++){
            for(int j=0; j<col; j++){
			
			// count live cells around each cell by traversing to adjacent cells where we can move inside the boundary of board
                int lives = 0;
                for(auto dir: dirs){
				
				// (x,y) = new position
                    int x = i + dir.first;
                    int y = j + dir.second;
                    if(isSafe(x, y, row, col) and temp[x][y]==1)
                        lives++;
                }
				
				// here goes the condition of the problem
                if(temp[i][j]==0 and lives==3) board[i][j]=1;
                else if(temp[i][j]==1 and (lives<2 or lives>3)) board[i][j]=0;
            }
        }
    }
    
private:
// function to check if new position is inside boundary or not
    bool isSafe(int x, int y, int row, int col){
        if(x<0 or x>=row or y<0 or y>=col) return false;
        return true;
    }
};
P.s. traversing in adjacent directions using vector is much faster than traversing using a for loop (it takes somee extra space though)
